
require('./lib')

describe('properties', function() {

    it('invalid', function() {
        var layer = createLayer("Hej")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 0)
        var layer = createLayer("Hej:hej")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 0)
        var layer = createLayer("Hej [x:y]")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 0)
    })

    it('one valid', function() {
        var layer = createLayer("1")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "padding")
        var layer = createLayer("Hej:w100")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "width")
        assert.equal(properties.objectAtIndex(0).value(), 100)
        var layer = createLayer("Hej [w100]")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "width")
        assert.equal(properties.objectAtIndex(0).value(), 100)
    })

    it('two valid', function() {
        var layer = createLayer("w100:h100")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 2)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "width")
        assert.equal(properties.objectAtIndex(1).isValid(), true)
        assert.equal(properties.objectAtIndex(1).key(), "height")
        var layer = createLayer("1:2:w100:3:4")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 2)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "width")
        assert.equal(properties.objectAtIndex(0).value(), 100)
        assert.equal(properties.objectAtIndex(1).isValid(), true)
        assert.equal(properties.objectAtIndex(1).key(), "padding")
        assert.equal(properties.objectAtIndex(1).value()._top, 1)
        assert.equal(properties.objectAtIndex(1).value()._right, 2)
        assert.equal(properties.objectAtIndex(1).value()._bottom, 3)
        assert.equal(properties.objectAtIndex(1).value()._left, 4)
    })

    it('padding', function() {
        var layer = createLayer("Component [1]")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "padding")
        assert.equal(properties.objectAtIndex(0).value()._top, 1)
        assert.equal(properties.objectAtIndex(0).value()._right)
        assert.equal(properties.objectAtIndex(0).value()._bottom)
        assert.equal(properties.objectAtIndex(0).value()._left)
        var layer = createLayer("Component [1:2]")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "padding")
        assert.equal(properties.objectAtIndex(0).value()._top, 1)
        assert.equal(properties.objectAtIndex(0).value()._right, 2)
        assert.equal(properties.objectAtIndex(0).value()._bottom)
        assert.equal(properties.objectAtIndex(0).value()._left)
        var layer = createLayer("Component [1:2:3]")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "padding")
        assert.equal(properties.objectAtIndex(0).value()._top, 1)
        assert.equal(properties.objectAtIndex(0).value()._right, 2)
        assert.equal(properties.objectAtIndex(0).value()._bottom, 3)
        assert.equal(properties.objectAtIndex(0).value()._left)
        var layer = createLayer("Component [1:2:3:4]")
        var properties = Properties.new(layer)
        assert.equal(properties.count(), 1)
        assert.equal(properties.objectAtIndex(0).isValid(), true)
        assert.equal(properties.objectAtIndex(0).key(), "padding")
        assert.equal(properties.objectAtIndex(0).value()._top, 1)
        assert.equal(properties.objectAtIndex(0).value()._right, 2)
        assert.equal(properties.objectAtIndex(0).value()._bottom, 3)
        assert.equal(properties.objectAtIndex(0).value()._left, 4)
    })

    it('_raw', function() {
        var properties = Properties.new(createLayer("Component [1]"))
        assert.deepEqual(properties._raw(), ["1"])
        var properties = Properties.new(createLayer("Component [w100:h100]"))
        assert.deepEqual(properties._raw(), ["w100", "h100"])
        var properties = Properties.new(createLayer("bg:w100:h100:xt100"))
        assert.deepEqual(properties._raw(), ["bg", "w100", "h100", "xt100"])
        var properties = Properties.new(createLayer("Component [w100:h100] [xt100]"))
        assert.deepEqual(properties._raw(), ["w100", "h100", "xt100"])
    })

})
